[project]
    authors = [{ name = "Nate Landau", email = "github@natenate.org" }]
    dependencies = [
        "arrow>=1.3.0",
        "boto3>=1.36.3",
        "flask>=3.1.0",
        "inflect>=7.5.0",
        "loguru>=0.7.3",
        "pymongo>=4.10.1",
        "python-dotenv>=1.0.1",
        "requests>=2.32.3",
        "rich>=13.9.4",
        "schedule>=1.2.2",
        "sh>=2.2.1",
    ]
    description = "Docker container to backup MongoDB databases"
    license = "AGPL-3.0-or-later"
    name = "backup-mongodb"
    readme = "README.md"
    requires-python = ">=3.11"
    version = "1.1.0"

    [project.scripts]
        backup-mongodb = "backup_mongodb.main:main"

    [project.urls]
        homepage   = "https://github.com/natelandau/backup-mongodb"
        repository = "https://github.com/natelandau/backup-mongodb"

[build-system]
    build-backend = "hatchling.build"
    requires      = ["hatchling"]

[tool.uv]
    dev-dependencies = [
        "commitizen>=4.1.0",
        "coverage>=7.6.10",
        "freezegun>=1.5.1",
        "mypy>=1.14.1",
        "poethepoet>=0.32.1",
        "pre-commit>=4.1.0",
        "pytest-asyncio>=0.25.2",
        "pytest-clarity>=1.0.1",
        "pytest-env>=1.1.5",
        "pytest-mock>=3.14.0",
        "pytest-pretty-terminal>=1.1.0",
        "pytest-sugar>=1.0.0",
        "pytest-xdist>=3.6.1",
        "pytest>=8.3.4",
        "ruff>=0.9.2",
        "shellcheck-py>=0.10.0.1",
        "typos>=1.29.4",
        "yamllint>=1.35.1",
    ]

[tool.commitizen]
    bump_message               = "bump(release): v$current_version â†’ v$new_version"
    changelog_merge_prerelease = true
    tag_format                 = "v$version"
    update_changelog_on_bump   = true
    version_provider           = "pep621"

[tool.coverage.report] # https://coverage.readthedocs.io/en/latest/config.html#report
    exclude_lines = [
        'def __repr__',
        'except [\w\s\._]+ as .*:',
        'log\.critical',
        'log\.debug',
        'log\.error',
        'log\.exception',
        'log\.info',
        'log\.success',
        'log\.trace',
        'log\.warning',
        'pragma: no cover',
        'raise Abort',
        'raise Exit',
        'raise typer\.Exit',
    ]
    fail_under = 10
    precision = 1
    show_missing = true
    skip_covered = true

[tool.coverage.run]
    branch       = true
    command_line = "--module pytest"
    data_file    = "reports/.coverage"
    source       = ["src"]

[tool.coverage.xml]
    output = "reports/coverage.xml"

[tool.mypy] # https://mypy.readthedocs.io/en/latest/config_file.html
    disallow_any_unimported = false
    disallow_subclassing_any = false
    disallow_untyped_decorators = false
    disallow_untyped_defs = true
    exclude = [
        'tests/', # TOML literal string (single-quotes, regex okay, no escaping necessary)
    ]
    follow_imports = "normal"
    ignore_missing_imports = true
    junit_xml = "reports/mypy.xml"
    no_implicit_optional = true
    pretty = false
    show_column_numbers = true
    show_error_codes = true
    show_error_context = true
    strict_optional = true
    warn_redundant_casts = true
    warn_unreachable = true
    warn_unused_ignores = true

[tool.pytest.ini_options]
    addopts                            = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --junitxml=reports/pytest.xml"
    asyncio_default_fixture_loop_scope = "function"
    asyncio_mode                       = "auto"
    filterwarnings                     = ["error", "ignore::DeprecationWarning"]
    testpaths                          = ["src", "tests"]
    xfail_strict                       = true

[tool.ruff] # https://github.com/charliermarsh/ruff
    fix            = true
    line-length    = 100
    output-format  = "grouped"
    src            = ["src", "tests"]
    target-version = "py311"

    [tool.ruff.lint]
        ignore = [
            "ANN204",  # Missing return type annotation for special method `__init__`
            "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
            "B006",    # mutable-argument-default
            "B008",    # function-call-in-default-argument
            "COM812",  # Trailing comma missing"
            "CPY001",  # Missing copyright notice at top of file
            "D107",    # undocumented-public-init
            "D213",    # multi-line-summary-second-line
            "D215",    # section-underline-not-over-indented
            "D406",    # new-line-after-section-name
            "D407",    # dashed-underline-after-section
            "D408",    # section-underline-after-name
            "D409",    # section-underline-matches-section-length
            "D413",    # blank-line-after-last-section
            "E501",    # line-too-long
            "FBT001",  # Boolean-typed positional argument in function definition
            "FBT002",  # Boolean-typed positional argument in function definition
            "FIX002",  # Line contains TODO, consider resolving the issue
            "ISC001",  # single-line-implicit-string-concatenation
            "N805",    # invalid-first-argument-name-for-method
            "PLC0206", # Specify .items when iterating over a dictionary
            "PLR0913", # too-many-arguments
            "RSE102",  # Unnecessary parentheses on raised exception
            "S311",    # suspicious-non-cryptographic-random-usage
            "TD002",   # Missing author in TODO
            "TD003",   # Missing issue link on the line following this TODO
            "UP007",   # non-pep604-annotation
        ]
        per-file-ignores = { "cli.py" = [
            "PLR0912",
            "PLR0913",
            "PLR0917",
        ], "tests/*.py" = [
            "A002",
            "A003",
            "ANN001",
            "ANN201",
            "ARG002",
            "ARG005",
            "D102",
            "ERA001",
            "F403",
            "PGH003",
            "PLR0913",
            "PLR0917",
            "PLR2004",
            "PLR6301",
            "S101",
        ] }
        select = ["ALL"]
        unfixable = ["E712", "ERA001", "F401", "F841", "UP007"]
        [tool.ruff.lint.mccabe]
            # Unlike Flake8, default to a complexity level of 10.
            max-complexity = 10

        [tool.ruff.lint.pydocstyle]
            convention = "google"

        [tool.ruff.lint.pylint]
            max-args = 6

    [tool.ruff.format]
        indent-style              = "space"
        line-ending               = "auto"
        quote-style               = "double"
        skip-magic-trailing-comma = false

[tool.poe.tasks]
    [tool.poe.tasks.upgrade]
        shell = """
        echo "-- Upgrading packages --" &&
        uv lock --upgrade &&
        echo "-- Autoupdating pre-commit --" &&
        pre-commit autoupdate
        """

    [[tool.poe.tasks.lint.sequence]]
        shell = "ruff check --no-fix src/"

    [[tool.poe.tasks.lint.sequence]]
        shell = "ruff format --check src/ tests/"

    [[tool.poe.tasks.lint.sequence]]
        shell = "mypy --config-file pyproject.toml src/"

    [[tool.poe.tasks.lint.sequence]]
        shell = "typos"

    [[tool.poe.tasks.lint.sequence]]
        cmd = """
                pre-commit run
                    --all-files
                    --color always
                """

    [tool.poe.tasks.test]
        help = "Test this package"

        [[tool.poe.tasks.test.sequence]]
            cmd = "coverage run"

        [[tool.poe.tasks.test.sequence]]
            cmd = "coverage report"

        [[tool.poe.tasks.test.sequence]]
            cmd = "coverage xml"
